doctest for ``3-say_my_name.py`` module
==========================================

``say_my_name()`` prints string contaning first name and last name
------------------------------------------------------------------

# Import ``say_my_name`` from ``3-say_my_name`` module

>>> say_my_name = __import__('3-say_my_name').say_my_name


""" SUCCESSFUL TEST CONDITIONS """
==================================
# Check that first line contains #!/usr/bin/python3
>>> with open("3-say_my_name.py", "r") as file:
...     first_line = file.readline().strip()
>>> first_line == "#!/usr/bin/python3"
True

# Checks if there is no import of any module
>>> with open("3-say_my_name.py", "r") as file:
...     for line in file:
...         if line.strip().startswith("import") or line.strip().startswith("from"):
...             print("Import statement found:", line.strip())
...

# Checks that module is documented
>>> bool('3-say_my_name'.__doc__)
True

# Testing functions with correct argument
>>> say_my_name("Ope", "Richard")
My name is Ope Richard

# Testing functions with one argument
>>> say_my_name("Opeyemi")
My name is Opeyemi 


# Pycodestyle validation
>>> import pycodestyle
>>> pycodestyle.StyleGuide().check_files(['3-say_my_name.py']).total_errors == 0
True


""" TEST CONDITIONS WHERE AN ERROR IS RAISED """
================================================

# Testing function handles first_name not string
>>> say_my_name(7, "Richard")
Traceback (most recent call last):
...
TypeError: first_name must be a string


# Testing function handles last name not string
>>> say_my_name("Ope", 9.0)
Traceback (most recent call last):
...
TypeError: last_name must be a string


# Testing function handles both argument not string
>>> say_my_name(7, 9.0)
Traceback (most recent call last):
...
TypeError: first_name must be a string
