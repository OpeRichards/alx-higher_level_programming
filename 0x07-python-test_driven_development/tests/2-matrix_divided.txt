doctest for ``2-matrix_divided.py`` module
==========================================

``matrix_divided()`` returns a new matrix with all elements scalar divided
--------------------------------------------------------------------------

# Import ``matrix_divided`` from ``2-matrix_divided`` module

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided


""" SUCCESSFUL TEST CONDITIONS """
==================================
# Check that first line contains #!/usr/bin/python3
>>> with open("2-matrix_divided.py", "r") as file:
...     first_line = file.readline().strip()
>>> first_line == "#!/usr/bin/python3"
True

# Checks if there is no import of any module
>>> with open("2-matrix_divided.py", "r") as file:
...     for line in file:
...         if line.strip().startswith("import") or line.strip().startswith("from"):
...             print("Import statement found:", line.strip())
...

# Checks that module is documented
>>> bool('2-matrix_divided'.__doc__)
True

# Testing functions with '1 x 3' matrix
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]


# Testing function with negative ZeroDivisionError
>>> matrix_divided([[3, 9], [12, 15]], -3)
[[-1.0, -3.0], [-4.0, -5.0]]


# Pycodestyle validation
>>> import pycodestyle
>>> pycodestyle.StyleGuide().check_files(['2-matrix_divided.py']).total_errors == 0
True


""" TEST CONDITIONS WHERE AN ERROR IS RAISED """
================================================

# Testing how function handles division by zero
>>> matrix_divided([[3, 9], [12, 15]], 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero


# Testing how function handles different matrix size
>>> matrix_divided([[3, 9], [2, 3, 4]], 2)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size


# Testing how function handles incorrect matrix elements
>>> matrix_divided([[3, "9"], [4, 5]], 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats


# Testing how function handles incorrect matrix elements
>>> matrix_divided([["string"], ["another"]], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats


# Testing how function handles division by incorrect type
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], "alx")
Traceback (most recent call last):
...
TypeError: div must be a number


# Testing how function handles an empty list
>>> matrix_divided([[], [4, 5, 6]], 2)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size
